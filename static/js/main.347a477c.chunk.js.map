{"version":3,"sources":["components/Signup.js","components/Signin.js","components/Home.js","components/Weather.js","components/Logout.js","components/Protected.js","App.js","serviceWorker.js","index.js"],"names":["Signup","useState","email","password","name","c_password","values","setValues","handleChange","event","target","value","useEffect","handleClientLoad","gapi","load","initClient","client","init","then","auth2","getAuthInstance","isSignedIn","get","console","log","Container","className","Row","Col","onSubmit","alert","preventDefault","params","spreadsheetId","range","valueInputOption","insertDataOption","valueRangeBody","sheets","spreadsheets","append","response","reason","error","result","message","class","FormGroup","type","placeholder","onChange","Form","Group","controlId","Check","label","Button","color","Media","Image","src","SignIn","is_login","logInStatus","setStatus","from","to","login_data","JSON","stringify","i","parse","length","localStorage","setItem","window","location","reload","Home","state_wise_data","require","Table","striped","bordered","hover","variant","map","states","index","key","State","Confirmed","Active","Recovered","Deaths","Weather","city","date","temp","feels_like","humidity","wind","clouds","active","weather","setWeather","getWeatherReport","e","a","fetch","api_call","json","weather_data","months","d","Date","getDate","month","getMonth","today","parseFloat","main","toFixed","speed","all","list","Logout","logout","Protected","props","Cmp","component","auth","getItem","App","path","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.347a477c.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Form,Button ,FormGroup, Media, Image, Container, Row, Col, Card, FormCheck} from 'react-bootstrap';\nimport { gapi } from 'gapi-script';\n\nconst SPREADSHEET_ID = '1dmN8WibC_8nvAdTtGXOFNo74EjeZx5cl4vU-UNq0Cnw'; //from the URL of your blank Google Sheet\nconst CLIENT_ID = '32857250398-fk549cd2ta12kf0bobakjbndue7hafjm.apps.googleusercontent.com'; //from https://console.developers.google.com/apis/credentials\nconst API_KEY = 'AIzaSyBB_Nd207F9MELMvcHBlhkDX2ufWAlZ2uo'; //https://console.developers.google.com/apis/credentials\nconst SCOPE = 'https://www.googleapis.com/auth/spreadsheets';\n\nconst Signup = () => {\n    const [values, setValues] = useState({ email: \"\", password: \"\", name: \"\", c_password: \"\" })\n\n    const handleChange = event => {\n        const { name, value } = event.target\n        setValues({\n            ...values,\n            [name]: event.target.value,\n        });\n    }\n\n    useEffect(() => {\n        handleClientLoad();\n    });\n\n    const handleClientLoad = () => { \n        gapi.load('client:auth2', initClient);\n    }\n\n    const updateSignInStatus = (isSignedIn) => {\n        if (isSignedIn) {\n            console.log(\"Signed In\");\n        }\n      }\n\n    const initClient = () => { \n        gapi.client.init({\n            'apiKey': API_KEY,\n            'clientId': CLIENT_ID,\n            'scope': SCOPE,\n            'discoveryDocs': ['https://sheets.googleapis.com/$discovery/rest?version=v4'],\n        }).then(function() {\n            updateSignInStatus(gapi.auth2.getAuthInstance().isSignedIn.get());\n        });\n    }\n\n\n    const onFormSubmit = (event) => {\n        if(values.password != values.c_password) {\n            alert(\"Password and Confirm passowrd does not match\");\n        } else {\n            event.preventDefault();\n            const params = {\n                spreadsheetId: SPREADSHEET_ID,\n                range: 'Sheet1',\n                valueInputOption: 'RAW',\n                insertDataOption: 'INSERT_ROWS',\n            };\n            const valueRangeBody = {\n                'majorDimension': 'ROWS', \n                'values': [[values.name,values.email,values.password]]\n            };\n            let request = gapi.client.sheets.spreadsheets.values.append(params, valueRangeBody);\n            request.then(function (response) {\n                alert(\"Registration Successful\");\n                \n            }, function (reason) {\n                console.error('error: ' + reason.result.error.message);\n            });\n        }\n    }\n\n    return (\n        <div>\n            <Container className=\"w-75 d-flex justify-content-center border border-darken-1 mt-5\">\n                <Row className=\"container-fluid\">\n                    <Col>\n                    <h3 className=\"d-flex\">Signup</h3>\n                    <form onSubmit={onFormSubmit} class=\"\">\n                        <FormGroup>\n                            <input  class=\"form-control col-md-8\" type=\"text\" name=\"name\" placeholder=\"Your Name\" value={values.name} onChange={handleChange}></input>\n                        </FormGroup>\n                        <FormGroup>\n                            \n                            <input class=\"form-control col-md-8\" type=\"email\" name=\"email\" placeholder=\"Your Email\" value={values.email} onChange={handleChange}></input>\n                        </FormGroup>\n                        <FormGroup>\n                            <input class=\"form-control col-md-8\" type=\"password\" name=\"password\" placeholder=\"Your Password\" value={values.password} onChange={handleChange}></input>\n                        </FormGroup>\n                        <FormGroup>\n                            <input class=\"form-control col-md-8\" type=\"password\" name=\"c_password\" placeholder=\"Repeat Your password\" onChange={handleChange}></input>\n                        </FormGroup>\n                        <Form.Group className=\"d-flex\" class=\"form-control\" controlId=\"formBasicCheckbox\">\n                            <Form.Check type=\"checkbox\" label=\"I agree to all statements in Terms of service\" />\n                        </Form.Group>\n                        <Button className=\"float-left mb-3\" color=\"primary\" type=\"submit\">\n                            Register\n                        </Button>\n                    </form>\n                    </Col>\n                    <Col>\n                        <Media>\n                            <Image src=\"signup-image.webp\"></Image>\n                        </Media>\n                    </Col>\n                </Row>\n            </Container>\n        </div>\n    );\n};\n\nexport default Signup\n","import React, { useEffect, useState } from 'react'\nimport { Redirect } from 'react-router-dom';\nimport { gapi } from 'gapi-script';\nimport { Form,Button ,FormGroup, Media, Image, Container, Row, Col, Card, FormCheck} from 'react-bootstrap';\n\nconst SPREADSHEET_ID = '1dmN8WibC_8nvAdTtGXOFNo74EjeZx5cl4vU-UNq0Cnw'; //from the URL of your blank Google Sheet\nconst CLIENT_ID = '32857250398-fk549cd2ta12kf0bobakjbndue7hafjm.apps.googleusercontent.com'; //from https://console.developers.google.com/apis/credentials\nconst API_KEY = 'AIzaSyBB_Nd207F9MELMvcHBlhkDX2ufWAlZ2uo'; //https://console.developers.google.com/apis/credentials\nconst SCOPE = 'https://www.googleapis.com/auth/spreadsheets';\n\n\n\nconst SignIn = () => {\n    const [values, setValues] = useState({ email: \"\", password: \"\", name: \"\" });\n    const [logInStatus, setStatus] = useState({is_login:\"\"})\n\n    const handleChange = event => {\n        const { name, value } = event.target\n        setValues({\n            ...values,\n            [name]: event.target.value,\n        });\n    }\n\n    useEffect(() => {\n        handleClientLoad();\n    });\n\n    const handleClientLoad = () => {\n        gapi.load('client:auth2', initClient);\n    }\n\n    const updateSignInStatus = (isSignedIn) => {\n        if (isSignedIn) {\n            console.log(\"Signed In\");\n        }\n    }\n\n    const initClient = () => {\n        gapi.client.init({\n            'apiKey': API_KEY,\n            'clientId': CLIENT_ID,\n            'scope': SCOPE,\n            'discoveryDocs': ['https://sheets.googleapis.com/$discovery/rest?version=v4'],\n        }).then(function () {\n            updateSignInStatus(gapi.auth2.getAuthInstance().isSignedIn.get());\n        });\n    }\n\n\n    const onFormSubmit = (event) => {\n            event.preventDefault();\n            const params = {\n                spreadsheetId: SPREADSHEET_ID,\n                range: 'Sheet1',\n            };\n            let request = gapi.client.sheets.spreadsheets.values.get(params);\n            request.then(function (response) {\n                var login_data     = JSON.stringify(response.result.values);\n                var login_data     = JSON.parse(login_data);\n\n                for (var i=0; i < login_data.length; i++) {\n                    if(login_data[i][1] === values.email && login_data[i][2] === values.password) {\n                        \n                        setStatus({\n                            ...logInStatus,\n                            is_login: true\n                        });\n                        localStorage.setItem('is_login', true);\n                        window.location.reload();\n                    } else {\n                        console.log(\"Error in Logging In\");\n                    }\n                }\n            }, function (reason) {\n                console.error('error: ' + reason.result.error.message);\n            });\n    }\n    \n    return (\n        <div>\n            {\n            (logInStatus.is_login == true) ? <Redirect from=\"/signin\" to=\"/home\" /> :  \n                <Container className=\"w-75 d-flex justify-content-center border border-darken-1 mt-5\">\n                    <Row className=\"container-fluid\">\n                        <Col>\n                            <Media>\n                                <Image src=\"signin-image.webp\"></Image>\n                            </Media>\n                        </Col>\n                        <Col>\n                            <h3 className='d-flex mt-4'>Sign In</h3>\n                            <form onSubmit={onFormSubmit} className=\"mt-5\">\n                                <FormGroup>\n                                    <input class=\"form-control col-md-5\" type=\"email\" name=\"email\" placeholder=\"Your Name\" onChange={handleChange} value={values.email}></input>\n                                </FormGroup>\n                                <FormGroup>\n                                    <input class=\"form-control col-md-5\" type=\"password\" name=\"password\" placeholder=\"Your Password\" onChange={handleChange} value={values.password}></input>\n                                </FormGroup>\n                                <Form.Group className=\"d-flex\" class=\"form-control\" controlId=\"formBasicCheckbox\">\n                                    <Form.Check type=\"checkbox\" label=\"Remember me\" />\n                                </Form.Group>\n                                <Button className=\"float-left\" type=\"submit\">Log In</Button>\n                            </form>\n                        </Col>\n                    </Row>\n                </Container>\n            }\n        </div>\n    );\n}\n\nexport default SignIn\n","import React, { useEffect } from 'react';\nimport { Table,Card, Row, Col, Container} from 'react-bootstrap';\nconst Home = () => {\n\n    const state_wise_data = require('./state_wise_data.json');\n    const renderTable = (states, index) => {\n        return (\n            <tr key={index}>\n                <td>{states.State}</td>\n                <td>{states.Confirmed}</td>\n                <td>{states.Active}</td>\n                <td>{states.Recovered}</td>\n                <td>{states.Deaths}</td>\n            </tr> \n        )\n    }\n        return (\n            <div>\n                <Row>\n                    <Col className=\"container d-flex justify-content-start\">\n                        <Container>\n                            <input type=\"text\" class=\"form-control mb-4 mt-5 w-50\"></input>\n                            <div class=\"w-50\">\n                                <Table striped bordered hover variant=\"light\">\n                                    <thead>\n                                        <tr>\n                                        <th>State/UT</th>\n                                        <th>Confirmed</th>\n                                        <th>Active</th>\n                                        <th>Recovered</th>\n                                        <th>Deceased</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                    {state_wise_data.map(renderTable)}\n                                    </tbody>\n                            </Table>\n                            </div>\n                        </Container>\n                    </Col>\n                </Row>\n            </div>\n        );\n}\n\nexport default Home;","import React, { useEffect, useState } from 'react';\nimport { Form,Button ,FormGroup, Media, Image, Container, Row, Col, Card, FormCheck} from 'react-bootstrap';\n\nconst Weather = () => {\n    const [weather ,setWeather] = useState({city:\"\",date:\"\",temp:\"\",feels_like:\"\",humidity:\"\",wind:\"\",clouds:\"\",active:false});\n    \n    const getWeatherReport = async(e) => {\n        const city =  e.target.value;\n        const api_call  = await  fetch(\"https://api.openweathermap.org/data/2.5/weather?q=\"+city+\"&appid=da65eada764bb643cba2efa988e63859\");\n        const weather_data = await api_call.json();\n        //const weather_data  = require(\"./weather_data.json\");\n        const months = [\"Jan\",\"Feb\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"];\n        const d = new Date();\n        const date = d.getDate();\n        const month = d.getMonth();\n        const today = date +\" \"+ months[month];\n        const temp  = (parseFloat(weather_data.main.temp)-273.1).toFixed(2);\n        const feels_like = (parseFloat(weather_data.main.feels_like)-273.1).toFixed(2);\n        const humidity  = weather_data.main.humidity;\n        const wind =     weather_data.wind.speed;\n        const clouds =   weather_data.clouds.all;\n\n        setWeather({\n            ...weather,\n            date:today,\n            temp: temp,\n            feels_like: \"Feels like \"+feels_like,\n            humidity:humidity,\n            wind:wind,\n            city:city,\n            clouds:clouds,\n            active:true\n        })\n    }\n    const cityList = [\"Mumbai\", \"Delhi\", \"Chennai\", \"Bangalore\", \"Lucknow\", \"Kolkata\", \"Allahabad\"];\n    return (\n        <div>\n            <div className=\"bg container-fluid\">\n                <Row>\n                    <Col>\n                        <div className=\"dropdown d-flex justify-content-end\">\n                            <select class=\"btn btn-warning dropdown-toggle mt-5\" onChange={getWeatherReport}>\n                                {\n                                    cityList.map(list => (\n                                    <option key={list} value={list}>{list}</option>\n                                    ))\n                                }\n                            </select>\n                        </div>\n                    </Col>\n                </Row>\n                <div className={((weather.active == false) ? 'd-none' : null)}>\n                <Row>\n                    <Col className=\"date_city\">\n                        <div className=\"container-fluid d-flex justify-content-start\">\n                            <h4 className=\"date\">{weather.date}</h4>\n                        </div>\n                        <div className=\"container-fluid d-flex justify-content-start\">\n                            <h1 className=\"city\">{weather.city}&rarr;</h1>\n                        </div>\n                    </Col>\n                </Row>\n                <Row className=\"d-flex justify-content-start weather-report\">\n                    <Col className=\"mt-5\">\n                        <div>\n                            <h1 class=\"temp\">{weather.temp}&deg;C</h1>\n                            <h5>{weather.feels_like}&deg;C</h5>\n                        </div>\n                    </Col>\n                    <Col className=\"mt-5\">\n                        <div>\n                            <h4>Rain</h4>\n                            <h4>{weather.clouds}%</h4>\n                        </div>\n                    </Col>\n                    <Col className=\"mt-5\">\n                        <div>\n                            <h4>Wind</h4>\n                            <h4>{weather.wind} km/h</h4>\n                        </div>\n                    </Col>\n                    <Col className=\"mt-5\">\n                        <div>\n                            <h4>Humidity</h4>\n                            <h4>{weather.humidity} %</h4>\n                        </div>\n                    </Col>\n                </Row>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Weather;","import React, { useState , useEffect} from 'react';\nimport { Redirect } from 'react-router-dom';\n\nconst Logout = () => {\n    const [logInStatus, setStatus] = useState({is_login:\"\"})\n\n    useEffect(() => {\n        logout();\n    });\n    const logout = () => {\n        localStorage.setItem('is_login', false);\n        setStatus({\n            ...logInStatus,\n            is_login: false\n        });\n        window.location.reload();\n    }\n        return (\n            <div>\n                { \n                (logInStatus.is_login == false) ? <Redirect to=\"/signin\" /> : null\n                }\n            </div>\n        );\n}\n\nexport default Logout;","import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nconst Protected = (props) => {\n        const Cmp  = props.component;\n        var auth = JSON.parse(localStorage.getItem(\"is_login\"));\n        return (\n            <div>\n                {\n                    (auth) ? <Cmp /> : <Redirect to=\"/signin\" />\n                }\n            </div>\n        );\n}\n\nexport default Protected;","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Redirect } from 'react-router-dom';\nimport { BrowserRouter as Router, Link, Switch, Route } from 'react-router-dom';\n\nimport './App.css';\nimport Signup from './components/Signup';\nimport SignIn from './components/Signin';\nimport Home from './components/Home';\nimport Weather from './components/Weather';\nimport Logout from './components/Logout';\nimport Protected from './components/Protected';\n\n\nfunction App() {\n    var auth = JSON.parse(localStorage.getItem(\"is_login\")); \n    return (\n        <div className=\"App\">\n            {\n            (auth == true) \n            ? \n                <Router>\n                    <Link to=\"home\">Home</Link>\n                    <Link to=\"weather\">Weather</Link>\n                    <Link to=\"logout\">Logout</Link>\n                    <Switch>\n                        <Route path=\"/Home\">\n                            <Protected component={Home}/>\n                        </Route>\n                        <Route path=\"/Weather\" component={Weather}>\n                            <Protected component={Weather}/>   \n                        </Route>\n                        <Route path=\"/Logout\" component={Logout}>\n                            <Protected component={Logout}/>   \n                        </Route>\n                    </Switch>\n                </Router>  \n        :\n                <Router>\n                    <Link to=\"signup\">Sign Up</Link>\n                    <Link to=\"signin\">Sign In</Link>\n                    <Switch>\n                        <Route path=\"/Signup\" component={Signup}>\n                        </Route>\n                        <Route path=\"/Signin\" component={SignIn}>\n                        </Route>\n                    </Switch>\n                </Router>\n        }\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}